
function VERDICT(pat_num, opts)

% MATLAB function to carry out VERDICT processing 

% INNOVATE patient number and VERDICT model type specified as inputs

% Model type can be: 'Original' or 'No VASC'

arguments
    pat_num % INNOVATE patient number
    opts.modeltype = 'Original VERDICT' % Type of VERDICT model to fit
    opts.schemename = 'Original Full' % Name of imaging scheme
    opts.fittingtechnique = "AMICO" % Fitting framwork to use

    opts.noisetype = 'Rice'
    opts.sigma0train = 0.05 % Noise level used in MLP training
    opts.T2train = 10000
    
    opts.STUDY_path = "D:\UCL PhD Imaging Data\INNOVATE VERDICT\" % Path to INNOVATE imaging folder
    opts.parent_folder = "C:\Users\adam\OneDrive - University College London\UCL PhD\PhD Year 1\Projects\VERDICT Screening\Outputs" % Parent folder to save outputs
    opts.schemesfolder = "C:\Users\adam\OneDrive - University College London\UCL PhD\PhD Year 1\Projects\VERDICT Screening\Code\VERDICT-Screening\General Code\Model Fitting\MLP\My Tests\Schemes"
    opts.modelsfolder = "C:\Users\adam\OneDrive - University College London\UCL PhD\PhD Year 1\Projects\VERDICT Screening\Code\VERDICT-Screening\General Code\Model Fitting\MLP\My Tests\New MLP Models"
    opts.pythonfolder = "C:\Users\adam\OneDrive - University College London\UCL PhD\PhD Year 1\Projects\VERDICT Screening\Code\VERDICT-Screening\General Code\Model Fitting\MLP\My Tests\Python"

    opts.solver = 'lsqnonnegTikhonov'

    % Other calculations
    opts.calcADC = false
    opts.vADCbmax = 1001

end

% Define DICOM folder path
DICOM_path = join( [opts.STUDY_path "/" pat_num "\scans"], "");
if exist(DICOM_path, "dir")
    disp('')
else
    DICOM_path = join( [opts.STUDY_path "/" pat_num], "");
end


switch opts.fittingtechnique

    case 'MLP'
        % Define output folder
        output_path = join([opts.parent_folder "/New VERDICT outputs/" string(opts.modeltype) "/" string(opts.schemename) "/" string(opts.fittingtechnique) "/" pat_num "/" string(opts.noisetype) "/T2_" string(opts.T2train) "/sigma_" num2str(opts.sigma0train)], "");

    case 'AMICO'
        % Define output folder
        output_path = join([opts.parent_folder "/New VERDICT outputs/" string(opts.modeltype) "/" string(opts.schemename) "/" string(opts.fittingtechnique) "/" pat_num ], "");

end

if ~exist(output_path, "dir")
   mkdir(output_path)
end


%% Apply VERDICT processing

switch opts.modeltype

    case 'Original VERDICT'

        ncompart = 2;
        fitting = 'VERDICT';
        Rs = linspace(0.1, 15.1, 17);


        % Decide b values to be excluded from f


        % Run VERDICT processing code
        [scheme, Y, fIC, fEES, fVASC, R, rmse] = verdict_Adam( ...
            convertStringsToChars(DICOM_path), ...
            convertStringsToChars(output_path), ...
            PatientID = pat_num,...
            parent_folder = opts.parent_folder,...
            schemesfolder = opts.schemesfolder,...
            modelsfolder = opts.modelsfolder,...
            pythonfolder = opts.pythonfolder,...
            modeltype = opts.modeltype,...
            schemename = opts.schemename,...
            fittingtechnique = opts.fittingtechnique,...
            noisetype=opts.noisetype,...
            sigma0train = opts.sigma0train,...
            T2train=opts.T2train,...
            fitting = fitting,...
            ncompart = ncompart, ...
            Rs = Rs,...
            solver = opts.solver,...
            calcADC = opts.calcADC,...
            vADCbmax = opts.vADCbmax);
  


    case 'No VASC VERDICT'

        ncompart = 1;
        fitting = 'VERDICT';
        Rs = linspace(0.1, 15.1, 17);

        % Run VERDICT processing code
        [scheme, Y, fIC, fEES, fVASC, R, rmse] = verdict_Adam( ...
            convertStringsToChars(DICOM_path), ...
            convertStringsToChars(output_path), ...
            PatientID = pat_num,...
            parent_folder = opts.parent_folder,...
            schemesfolder = opts.schemesfolder,...
            modelsfolder = opts.modelsfolder,...
            pythonfolder = opts.pythonfolder,...
            modeltype = opts.modeltype,...
            schemename = opts.schemename,...
            fittingtechnique = opts.fittingtechnique,...
            noisetype=opts.noisetype,...
            sigma0train = opts.sigma0train,...
            T2train=opts.T2train,...
            fitting = fitting,...
            ncompart = ncompart, ...
            solver = opts.solver,...
            calcADC = opts.calcADC,...
            vADCbmax = opts.vADCbmax);


    case 'RDI v1.3'

        ncompart = 1;
        fitting = 'RDI';
        Rs = linspace(0.1, 15.1, 17);

        % Run VERDICT processing code
        [scheme, Y, fIC, fEES, fVASC, R, rmse] = verdict_Adam( ...
            convertStringsToChars(DICOM_path), ...
            convertStringsToChars(output_path), ...
            PatientID = pat_num,...
            parent_folder = opts.parent_folder,...
            schemesfolder = opts.schemesfolder,...
            modelsfolder = opts.modelsfolder,...
            pythonfolder = opts.pythonfolder,...    
            modeltype = opts.modeltype,...
            schemename = opts.schemename,...
            fittingtechnique = opts.fittingtechnique,...
            noisetype=opts.noisetype,...
            sigma0train = opts.sigma0train,...
            T2train=opts.T2train,...
            fitting = fitting,...
            ncompart = ncompart, ...
            solver = opts.solver,...
            calcADC = opts.calcADC,...
            vADCbmax = opts.vADCbmax);

    % case 'RDI v1.4'
    % 
    %     ncompart = 1;
    %     fitting = 'RDI';
    %     Rs = linspace(0.1, 15.1, 17);
    % 
    %     % Run VERDICT processing code
    %     [scheme, Y, fIC, fEES, fVASC, R, rmse] = verdict_Adam( ...
    %         convertStringsToChars(DICOM_path), ...
    %         convertStringsToChars(output_path), ...
    %         PatientID = pat_num,...
    %         parent_folder = opts.parent_folder,...
    %         schemesfolder = opts.schemesfolder,...
    %         modeltype = opts.modeltype,...
    %         schemename = opts.schemename,...
    %         fittingtechnique = opts.fittingtechnique,...
    %         sigma0train = opts.sigma0train,...
    %         fitting = fitting,...
    %         ncompart = ncompart, ...
    %         solver = opts.solver,...
    %         calcADC = opts.calcADC,...
    %         calcT2 = opts.calcT2...
    %         );



end



save([convertStringsToChars(output_path) '/fIC.mat'], 'fIC')
save([convertStringsToChars(output_path) '/R.mat'], 'R')

% Save results
% save([convertStringsToChars(output_path) '/scheme.mat'], 'scheme')
% save([convertStringsToChars(output_path) '/Y.mat'], 'Y')   

% save([convertStringsToChars(output_path) '/fEES.mat'], 'fEES')
% save([convertStringsToChars(output_path) '/fVASC.mat'], 'fVASC')

% save([convertStringsToChars(output_path) '/rmse.mat'], 'rmse')

end
